C51 COMPILER V9.60.0.0   MAIN                                                              09/12/2021 12:38:33 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include<reg52.h>
   2          #include<LCD1602.h>
   3          
   4          #define FRAME_LENGTH 23
   5          #define BUZZERRING (time[1]==0&&time[0]==0)
   6          #define DOTLIGHTUP (interruptCounter >= 256)
   7          
   8          xdata char chSecondsChannel   _at_ 0x7F00;
   9          xdata char chMinutesChannel   _at_ 0x7F02;
  10          xdata char chHoursChannel     _at_ 0x7F04;
  11          xdata char chDofWChannel      _at_ 0x7F06;
  12          xdata char chDateChannel      _at_ 0x7F07;
  13          xdata char chMonthChannel     _at_ 0x7F08;
  14          xdata char chYearChannel      _at_ 0x7F09;
  15          xdata char chRegA             _at_ 0x7F0A;
  16          xdata char chRegB             _at_ 0x7F0B;
  17          xdata char chRegC             _at_ 0x7F0C;
  18          xdata char chRegD             _at_ 0x7F0D;
  19          xdata char chCenturyChannel   _at_ 0x7F32;
  20          
  21          char buffer[30];//1970-01-01 THU 00:00:00
  22          char byteBuffer;
  23          char pBuffer = 0;
  24          int secondCounter = 0;
  25          
  26          xdata char weekDaysIndex[7] = {0xF6,0xEA,0xEE,0xE0,0xF1,0xE1,0xE8};
  27          
  28          char time[8];
  29          
  30          xdata char Line1[] =    " ****-**-** *** ";
  31          xdata char Line2[2][17] = 
  32          {
  33            " LOCAL time **s ",
  34            " NTP time   **s "
  35          };
  36          
  37          int interruptCounter = 0;
  38          char lastSecond = 0xFF;
  39          
  40          bit buzzerRing = 0;
  41          bit isWIFIOn = 0;
  42          bit hasUpdated = 0;
  43          
  44          void GetTime(){
  45   1        time[0] = chSecondsChannel;
  46   1        time[1] = chMinutesChannel;
  47   1        time[2] = chHoursChannel;
  48   1        time[3] = chDofWChannel-1;
  49   1        time[4] = chDateChannel;
  50   1        time[5] = chMonthChannel;
  51   1        time[6] = chYearChannel;
  52   1        time[7] = chCenturyChannel;
  53   1      }
  54          
C51 COMPILER V9.60.0.0   MAIN                                                              09/12/2021 12:38:33 PAGE 2   

  55          void SetTime(){
  56   1        char regB;
  57   1        
  58   1        regB = chRegB;
  59   1        chRegB = regB|0x80;
  60   1        
  61   1        chSecondsChannel = time[0];
  62   1        chMinutesChannel = time[1];
  63   1        chHoursChannel = time[2];
  64   1        chDofWChannel = time[3]+1;
  65   1        chDateChannel = time[4];
  66   1        chMonthChannel = time[5];
  67   1        chYearChannel = time[6];
  68   1        chCenturyChannel = time[7];
  69   1        
  70   1        chRegB = regB;
  71   1      }
  72          
  73          void Frame_Analyzer(){
  74   1        int i;
  75   1        char weekDayCharSum;
  76   1        if(pBuffer == FRAME_LENGTH){
  77   2          
  78   2          time[0] = ((buffer[21]-'0')<<4)|(buffer[22]-'0');
  79   2          time[1] = ((buffer[18]-'0')<<4)|(buffer[19]-'0');
  80   2          time[2] = ((buffer[15]-'0')<<4)|(buffer[16]-'0');
  81   2          
  82   2          weekDayCharSum = buffer[13]+buffer[12]+buffer[11];
  83   2          for(i = 0; i < 7; i++){
  84   3            if(weekDayCharSum == weekDaysIndex[i]){
  85   4              break;
  86   4            }
  87   3          }
  88   2          time[3] = i;
  89   2          
  90   2          time[4] = ((buffer[8]-'0')<<4)|(buffer[9]-'0');
  91   2          time[5] = ((buffer[5]-'0')<<4)|(buffer[6]-'0');
  92   2          time[6] = ((buffer[2]-'0')<<4)|(buffer[3]-'0');
  93   2          time[7] = ((buffer[0]-'0')<<4)|(buffer[1]-'0');
  94   2          
  95   2          EA = 0;
  96   2          SetTime();
  97   2          EA = 1;
  98   2        }
  99   1      }
 100          
 101          char Nixie_Action(bit dotFlag, char digit, char number){
 102   1        char ret_val = 0x00;
 103   1        
 104   1        ret_val = BUZZERRING ? ret_val|0x80 : ret_val;
 105   1        ret_val = dotFlag ? ret_val : ret_val|0x40;
 106   1        ret_val = ret_val|(digit<<4);
 107   1        ret_val = ret_val|number;
 108   1        
 109   1        return ret_val;
 110   1      }
 111          
 112          void Refresh(){
 113   1        Line1[1] = ((time[7] >> 4) & 0x0F)  + '0';
 114   1        Line1[2] = (time[7] & 0x0F ) + '0';
 115   1        Line1[3] = ((time[6] >> 4) & 0x0F) + '0';
 116   1        Line1[4] = (time[6] & 0x0F) + '0';
C51 COMPILER V9.60.0.0   MAIN                                                              09/12/2021 12:38:33 PAGE 3   

 117   1        
 118   1        Line1[6] = ((time[5] >> 4) & 0x0F) + '0';
 119   1        Line1[7] = (time[5] & 0x0F) + '0';
 120   1        
 121   1        Line1[9] = ((time[4] >> 4) & 0x0F) + '0';
 122   1        Line1[10] = (time[4] & 0x0F) + '0';
 123   1        
 124   1        switch(time[3]){
 125   2          case 0x00:
 126   2            Line1[12] = 'S';
 127   2            Line1[13] = 'U';
 128   2            Line1[14] = 'N';
 129   2            break;
 130   2          case 0x01:
 131   2            Line1[12] = 'M';
 132   2            Line1[13] = 'O';
 133   2            Line1[14] = 'N';
 134   2            break;
 135   2          case 0x02:
 136   2            Line1[12] = 'T';
 137   2            Line1[13] = 'U';
 138   2            Line1[14] = 'E';
 139   2            break;
 140   2          case 0x03:
 141   2            Line1[12] = 'W'; 
 142   2            Line1[13] = 'E';
 143   2            Line1[14] = 'D';
 144   2            break;
 145   2          case 0x04:
 146   2            Line1[12] = 'T';
 147   2            Line1[13] = 'H';
 148   2            Line1[14] = 'U';
 149   2            break;
 150   2          case 0x05:
 151   2            Line1[12] = 'F';
 152   2            Line1[13] = 'R';
 153   2            Line1[14] = 'I';
 154   2            break;
 155   2          case 0x06:
 156   2            Line1[12] = 'S';
 157   2            Line1[13] = 'A';
 158   2            Line1[14] = 'T';
 159   2            break;
 160   2          default:
 161   2            /* do nothing */
 162   2            break;
 163   2        }
 164   1        
 165   1        Line2[isWIFIOn][12] = time[0]>10 ? ((time[0]>>4)&0x0F)+'0' : ' ';
 166   1        Line2[isWIFIOn][13] = (time[0] & 0x0F) + '0';
 167   1      
 168   1        LCD1602_Refresh(Line1, Line2[isWIFIOn]);
 169   1      }
 170          
 171          void Initialize(){
 172   1        LCD1602_Init();
 173   1        
 174   1        chRegA = 0x27; //UIP DV2 DV1 DV0 RS3 RS2 RS1 RS0
 175   1        chRegB = 0x0A; // SET PIE AIE UIE SQWE DM 24/12 DSE
 176   1        
 177   1        SCON=0x50;
 178   1        PCON=0x00;
C51 COMPILER V9.60.0.0   MAIN                                                              09/12/2021 12:38:33 PAGE 4   

 179   1      
 180   1        TMOD=0x20;
 181   1        TL1=0xFA;
 182   1        TH1=0xFA;
 183   1        TR1=1;
 184   1        
 185   1        IT0=1;
 186   1      
 187   1        EX0 = 1;
 188   1        
 189   1        EA = 1;
 190   1      }
 191          
 192          void main(){
 193   1        Initialize();
 194   1        while(1){
 195   2          if(RI){
 196   3            RI = 0;
 197   3            byteBuffer = SBUF;
 198   3            if(byteBuffer == '.'){
 199   4              isWIFIOn = 0;
 200   4            }
 201   3            else if(byteBuffer == '^'){
 202   4              pBuffer = 0;
 203   4            }
 204   3            else if(byteBuffer == '$'){
 205   4              isWIFIOn = 1;
 206   4              if(!hasUpdated){
 207   5                hasUpdated = 1;
 208   5                Frame_Analyzer();
 209   5              }
 210   4            }
 211   3            else{
 212   4              buffer[pBuffer++] = byteBuffer;
 213   4            }
 214   3          }
 215   2          if(secondCounter>3600){
 216   3            secondCounter = 0;
 217   3            hasUpdated = 0;
 218   3          }
 219   2        }
 220   1      }
 221          
 222          
 223          void EX0_IRQ() interrupt 0{
 224   1        
 225   1        GetTime();
 226   1        
 227   1        switch(interruptCounter%4){
 228   2          case 0:
 229   2            P2 = Nixie_Action(0, 0, time[1]&0x0F);
 230   2            break;
 231   2          case 1:
 232   2            P2 = Nixie_Action(0, 1, (time[1]>>4)&0x0F);
 233   2            break;
 234   2          case 2:
 235   2            P2 = Nixie_Action(DOTLIGHTUP, 2, time[2]&0x0F);
 236   2            break;
 237   2          case 3:
 238   2            P2 = Nixie_Action(0, 3, (time[2]>>4)&0x0F);
 239   2            break;
 240   2          default:
C51 COMPILER V9.60.0.0   MAIN                                                              09/12/2021 12:38:33 PAGE 5   

 241   2            break;
 242   2        }
 243   1        
 244   1        if(lastSecond != time[0]){
 245   2          interruptCounter = 0;
 246   2          secondCounter++;
 247   2          lastSecond = time[0];
 248   2          Refresh();
 249   2        }
 250   1        else{
 251   2          interruptCounter++;
 252   2        }
 253   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    995    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     58    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     45       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
