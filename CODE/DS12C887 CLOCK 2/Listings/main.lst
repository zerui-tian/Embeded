C51 COMPILER V9.60.0.0   MAIN                                                              03/29/2021 20:03:37 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include<reg52.h>
   2          #include<intrins.h>
   3          
   4          #define uchar unsigned char
   5          #define uint unsigned int
   6          #define FRAME_LENGTH 16
   7          #define GETTIME_SIZE 8
   8          
   9          
  10          //tables
  11          uchar code dotTable[] = {
  12            0x00,//extinguish
  13            0x40//light up
  14          };
  15          uchar code digitSelectTable[] = {
  16            0x00,//
  17            0x80,//
  18            0x09,
  19            0x01,
  20            0x88,//
  21            0x08//
  22          };
  23          uchar code numberTable[] = {
  24            0x00,
  25            0x20,
  26            0x02,
  27            0x22,
  28            0x04,
  29            0x24,
  30            0x06,
  31            0x26,
  32            0x10,
  33            0x30
  34          };
  35          
  36          
  37          //variables in ds12c887
  38          xdata char chSecondsChannel   _at_ 0x8000;
  39          xdata char chMinutesChannel   _at_ 0x8002;
  40          xdata char chHoursChannel     _at_ 0x8004;
  41          xdata char chDofWChannel      _at_ 0x8006;
  42          xdata char chDateChannel      _at_ 0x8007;
  43          xdata char chMonthChannel     _at_ 0x8008;
  44          xdata char chYearChannel      _at_ 0x8009;
  45          xdata char chRegA             _at_ 0x800A;
  46          xdata char chRegB             _at_ 0x800B;
  47          xdata char chRegC             _at_ 0x800C;
  48          xdata char chRegD             _at_ 0x800D;
  49          xdata char chCenturyChannel   _at_ 0x8032;
  50          
  51          //global variables
  52          volatile uchar time[8];
  53          uchar buffer[FRAME_LENGTH];
  54          int pBuffer;
C51 COMPILER V9.60.0.0   MAIN                                                              03/29/2021 20:03:37 PAGE 2   

  55          bit isReceived_Frame;
  56          uint interruptCounter;
  57          uchar nixieScanner;
  58          uchar state;
  59          uchar lastSecond;
  60          void delay(uint xms){
  61   1        uint x,y;
  62   1        for(x=xms;x>0;x--)
  63   1          for(y=110;y>0;y--);
  64   1      }
  65          
  66          uchar Bin2BCD(uchar bin) {
  67   1        uchar bcd;
  68   1        bcd = bin % 10;
  69   1        bcd += ((bin / 10) << 4);
  70   1        return bcd;
  71   1      }
  72          
  73          void DS12C887_Init(){
  74   1        chRegA = 0x26; //UIP DV2 DV1 DV0 RS3 RS2 RS1 RS0
  75   1        chRegB = 0x0A; // SET PIE AIE UIE SQWE DM 24/12 DSE
  76   1      }
  77          void DS12C887_GetTime(){
  78   1        time[0] = chSecondsChannel;
  79   1        time[1] = chMinutesChannel;
  80   1        time[2] = chHoursChannel;
  81   1        time[3] = chDofWChannel;
  82   1        time[4] = chDateChannel;
  83   1        time[5] = chMonthChannel;
  84   1        time[6] = chYearChannel;
  85   1        time[7] = chCenturyChannel;
  86   1      }
  87          
  88          void DS12C887_SetTime(uchar* aim){
  89   1        uchar regB;
  90   1        
  91   1        regB = chRegB;
  92   1        chRegB = regB|0x80;
  93   1        
  94   1        chSecondsChannel = Bin2BCD( aim[0] );
  95   1        chMinutesChannel = Bin2BCD( aim[1] );
  96   1        chHoursChannel = Bin2BCD( aim[2] );
  97   1        chDofWChannel = ((aim[6] + (aim[6]>>2) + (aim[7]>>2) - 2*aim[7] + (26*(aim[5]+1)/10) + aim[4] - 1) % 7) +
             - 1;
  98   1        chDateChannel = Bin2BCD( aim[4] );
  99   1        chMonthChannel = Bin2BCD( aim[5] );
 100   1        chYearChannel = Bin2BCD( aim[6] );
 101   1        chCenturyChannel = Bin2BCD( aim[7] );
 102   1        
 103   1        chRegB = regB;
 104   1      }
 105          
 106          void Command_Analyzer(){
 107   1        switch(buffer[0]){
 108   2          case 0x01:
 109   2            DS12C887_SetTime(buffer+1);
 110   2            break;
 111   2          default:
 112   2            break;
 113   2        }
 114   1        isReceived_Frame = 0;
 115   1        pBuffer = 0;
C51 COMPILER V9.60.0.0   MAIN                                                              03/29/2021 20:03:37 PAGE 3   

 116   1      }
 117          
 118          uchar Nixie_Coder(uchar digit){
 119   1        uchar nixieCode;
 120   1        switch(state){
 121   2          case 0 :{
 122   3            switch(digit){
 123   4              case 0 :
 124   4                nixieCode = digitSelectTable[0] | numberTable[time[0]&0x0F] | dotTable[0];
 125   4                break;
 126   4              case 1 :
 127   4                nixieCode = digitSelectTable[1] | numberTable[ (time[0]>>4) &0x0F] | dotTable[0];
 128   4                break;
 129   4              case 2 :
 130   4                nixieCode = digitSelectTable[2] | numberTable[time[1]&0x0F] | dotTable[interruptCounter<512];
 131   4                break;
 132   4              case 3 :
 133   4                nixieCode = digitSelectTable[3] | numberTable[ (time[1]>>4) &0x0F] | dotTable[0];
 134   4                break;
 135   4              case 4 :
 136   4                nixieCode = digitSelectTable[4] | numberTable[time[2]&0x0F] | dotTable[interruptCounter<512];
 137   4                break;
 138   4              case 5 :
 139   4                nixieCode = digitSelectTable[5] | numberTable[ (time[2]>>4) &0x0F] | dotTable[0];
 140   4                break;
 141   4              default:
 142   4                break;
 143   4            }
 144   3            break;
 145   3          }
 146   2          case 1 :{
 147   3            switch(digit){
 148   4              case 0 :
 149   4                nixieCode = digitSelectTable[0] | numberTable[time[4]&0x0F] | dotTable[0];
 150   4                break;
 151   4              case 1 :
 152   4                nixieCode = digitSelectTable[1] | numberTable[ (time[4]>>4) &0x0F] | dotTable[0];
 153   4                break;
 154   4              case 2 :
 155   4                nixieCode = 0xFF;
 156   4                break;
 157   4              case 3 :
 158   4                nixieCode = digitSelectTable[3] | numberTable[time[5]&0x0F] | dotTable[0];
 159   4                break;
 160   4              case 4 :
 161   4                nixieCode = digitSelectTable[4] | numberTable[ (time[5]>>4) &0x0F] | dotTable[0];
 162   4                break;
 163   4              case 5 :
 164   4                nixieCode = 0xFF;
 165   4                break;
 166   4              default:
 167   4                break;
 168   4            }
 169   3            break;
 170   3          }
 171   2          case 2 :{
 172   3            switch(digit){
 173   4              case 0 :
 174   4                nixieCode = 0xFF;
 175   4                break;
 176   4              case 1 :
 177   4                nixieCode = digitSelectTable[1] | numberTable[time[6]&0x0F] | dotTable[0];
C51 COMPILER V9.60.0.0   MAIN                                                              03/29/2021 20:03:37 PAGE 4   

 178   4                break;
 179   4              case 2 :
 180   4                nixieCode = digitSelectTable[2] | numberTable[ (time[6]>>4) &0x0F] | dotTable[0];
 181   4                break;
 182   4              case 3 :
 183   4                nixieCode = digitSelectTable[3] | numberTable[time[7]&0x0F] | dotTable[0];
 184   4                break;
 185   4              case 4 :
 186   4                nixieCode = digitSelectTable[4] | numberTable[ (time[7]>>4) &0x0F] | dotTable[0];
 187   4                break;
 188   4              case 5 :
 189   4                nixieCode = 0xFF;
 190   4                break;
 191   4              default:
 192   4                break;
 193   4            }
 194   3            break;
 195   3          }
 196   2          default:{
 197   3            nixieCode = 0xFF;
 198   3            break;
 199   3          }
 200   2        }
 201   1        return nixieCode;
 202   1      }
 203          
 204          void initializer(){
 205   1        DS12C887_Init();
 206   1        pBuffer = 0;
 207   1        state = 0;
 208   1        interruptCounter = 0;
 209   1        isReceived_Frame = 0;
 210   1        
 211   1        SCON=0x50;           //设定串口工作方式
 212   1        PCON=0x00;           //波特率不倍增
 213   1      
 214   1        TMOD=0x20;           //定时器1工作于8位自动重载模式, 用于产生波特率
 215   1        TCON|=0x05;
 216   1      
 217   1        ES = 1;              //允许串口中断
 218   1        TL1=0xfd;
 219   1        TH1=0xfd;             //波特率9600
 220   1        TR1=1;
 221   1      
 222   1        EX0 = 1;
 223   1        EX1 = 1;
 224   1        
 225   1        IP = 0x11;
 226   1        
 227   1        EA = 1;
 228   1      }
 229          
 230          void main(){
 231   1        initializer();
 232   1        while(1){
 233   2        }
 234   1      }
 235          
 236          void Button_Action() interrupt 0{
 237   1        delay(10);
 238   1        if(P3^2==0){
 239   2          EA = 0;
C51 COMPILER V9.60.0.0   MAIN                                                              03/29/2021 20:03:37 PAGE 5   

 240   2          P1 = 0xFF;
 241   2          state = (state+1)%4;
 242   2          EA = 1;
 243   2        }
 244   1      }
 245          
 246          void Time_Updater() interrupt 2{
 247   1        DS12C887_GetTime();
 248   1        nixieScanner = (nixieScanner+1)%6;
 249   1        interruptCounter = (time[0]==lastSecond ? interruptCounter+1 : 0);
 250   1        P1 = Nixie_Coder(nixieScanner);
 251   1        P2 = 0x01<<(time[3]-1);
 252   1        lastSecond = time[0];
 253   1      }
 254          
 255          void  Byte_Receiver() interrupt 4{
 256   1        ES = 0;                //关闭串行中断
 257   1        RI = 0;                //清除串行接受标志位
 258   1        buffer[pBuffer++] = SBUF;            //从串口缓冲区取得数据
 259   1        if(pBuffer >= FRAME_LENGTH){
 260   2          Command_Analyzer();
 261   2        }
 262   1        else{
 263   2        }
 264   1        ES = 1;    //允许串口中断
 265   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1121    ----
   CONSTANT SIZE    =     18    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     31       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
